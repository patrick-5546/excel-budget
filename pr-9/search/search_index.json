{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Excel Budget","text":"<p>Xlbudget is a personal bookkeeping assistant that is in active development.</p>"},{"location":"coverage/","title":"Coverage Report","text":""},{"location":"license/","title":"License","text":"<pre><code>Copyright (c) 2016 The Python Packaging Authority (PyPA)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"developer_guide/contributing/","title":"Contributing","text":"<p>This repository's infrastructure features pinned dependency management, a documentation site, an automated release process, GitHub integration, VS Code integration, and much more.</p>"},{"location":"developer_guide/contributing/#setup-for-local-development","title":"Setup for Local Development","text":"<ol> <li>Install tox</li> <li>Clone the repository</li> </ol>"},{"location":"developer_guide/contributing/#tox","title":"Tox","text":"<p>tox is used to automate and standardize testing across local development environments and CI/CD pipelines.</p>"},{"location":"developer_guide/contributing/#tox-configuration","title":"Tox Configuration","text":"<p>The tox configuration for this repository can be found in <code>tox.ini</code>.</p>"},{"location":"developer_guide/contributing/#tox-environments","title":"Tox Environments","text":"<p>Each tox environment accomplishes a specific purpose. List all tox environments and their descriptions with <code>tox list</code>.</p> <p>Details about each environment are given below:</p> <ul> <li><code>py*</code>: for a particular python version, it<ol> <li>checks if the package can be built (may be commented out),</li> <li>runs the linters,</li> <li>runs the test suite, and</li> <li>generates a coverage report source file <code>.coverage</code></li> </ol> </li> <li><code>check-release</code>: checks that the package is ready to be released</li> <li><code>coverage</code>: converts <code>.coverage</code> to human readable formats<ul> <li><code>html</code>: used to create the Coverage Report page</li> <li><code>json</code>: used to create the coverage badge in the README</li> </ul> </li> <li><code>dev</code>: used to create a development environment with all dependencies installed<ul> <li>When in the development environment, the commands that are run in each environment   can be run in your terminal</li> </ul> </li> <li><code>docs-build</code>: builds the docs to ensure that they are in a valid state</li> <li><code>docs-serve</code>: runs the docs development server</li> <li><code>format</code>: runs the formatters</li> <li><code>upgrade</code>: updates the dependencies</li> </ul>"},{"location":"developer_guide/contributing/#running-tox-environments","title":"Running Tox Environments","text":"<ul> <li><code>tox -e &lt;environment&gt;</code> will run a single environment</li> <li><code>tox</code> will run all the default environments as noted by <code>tox list</code><ul> <li>To set an environment as default, add it to <code>envlist</code> in <code>tox.ini</code></li> </ul> </li> </ul> <p>Known issues running tox environments:</p> Environment Issue Solution <code>coverage</code> <code>coverage combine</code> outputs \"No data to combine\" <code>coverage</code> cannot be run independently, as it needs <code>.coverage</code> from <code>testenv</code>: run <code>tox</code> instead. If you are still getting this error, remove <code>.coverage</code> and rerun."},{"location":"developer_guide/contributing/#tox-development-environments","title":"Tox Development Environments","text":"<p>The <code>tox devenv</code> command will create a virtual environment and install the environment's dependencies in it.</p> <ul> <li>To create a virtual environment with all dependencies installed,   run <code>tox devenv -e dev .venv</code>.</li> <li>Using a virtual environment: activate Python virtual environments</li> </ul>"},{"location":"developer_guide/contributing/#dependencies","title":"Dependencies","text":"<p>Dependencies are defined in <code>pyproject.toml</code>. They are pinned and managed using pip-tools. The pinned dependencies can be found in <code>requirements/</code>.</p>"},{"location":"developer_guide/contributing/#how-to-add-or-update-dependencies","title":"How to Add or Update Dependencies","text":"<ol> <li>To add a dependency, add it in <code>pyproject.toml</code>;    where you add the dependency depends on what type of dependency it is:<ul> <li>Add project dependencies to the <code>dependencies</code> list</li> <li>Add environment-specific dependencies to the corresponding list   below <code>[project.optional-dependencies]</code></li> </ul> </li> <li>Run the <code>upgrade</code> tox environment: <code>tox -e upgrade</code></li> <li>Verify that the tests still pass: <code>tox</code></li> <li>If you are using the development environment, recreate it: <code>tox devenv -e dev .venv</code></li> <li>Commit and push the changes</li> </ol>"},{"location":"developer_guide/docs/","title":"Docs","text":"<p>The Docs were created using Material for MkDocs, a Markdown static site generator with a material design theme.</p>"},{"location":"developer_guide/docs/#running-docs-locally","title":"Running Docs Locally","text":"<ol> <li>Create and use the <code>dev</code> development environment</li> <li>Run the development server: <code>mkdocs serve</code><ul> <li>If you are using VS Code, see the VS Code Integration page</li> </ul> </li> </ol>"},{"location":"developer_guide/docs/#building-for-offline-usage","title":"Building for Offline Usage","text":"<p>To build for offline usage, uncomment the <code>offline</code> plugin in <code>mkdocs.yml</code> before running <code>mkdocs build</code>. For what this does, refer to the related Material for Mkdocs docs page.</p>"},{"location":"developer_guide/docs/#features","title":"Features","text":""},{"location":"developer_guide/docs/#automatic-documentation-from-sources","title":"Automatic Documentation from Sources","text":"<p>mkdocstrings was used to create the Code Reference section of the Docs.</p> <p>incompatible <code>theme.features</code></p> <p>mkdocstrings is not compatible with <code>theme.features.navigation.indexes</code>.</p>"},{"location":"developer_guide/docs/#versioning","title":"Versioning","text":"<p>The Docs site has the following versions:</p> <ul> <li>Version from branches<ul> <li><code>main</code>: aliased to <code>latest</code><ul> <li>Whenever you are on a version other than <code>latest</code>, a warning will be displayed   above the header</li> </ul> </li> <li><code>pr-&lt;pr number&gt;</code>:<ul> <li>Created when a pull request is opened</li> <li>Updated when the pull request commits are modified</li> <li>Deleted when the pull request is closed</li> </ul> </li> </ul> </li> <li>Version from releases: <code>&lt;x.x&gt;</code></li> </ul>"},{"location":"developer_guide/github_actions/","title":"GitHub Actions","text":""},{"location":"developer_guide/github_actions/#ci-workflow","title":"CI Workflow","text":"<p>The CI workflow contains the jobs that run in pull requests and pushes to the <code>main</code> branch:</p> <ul> <li><code>tests</code>: run tox on various Python versions and operating systems</li> <li><code>coverage</code>: generates code coverage reports for the docs site and README status badge</li> <li><code>docs-build</code>: builds the docs site</li> <li><code>markdownlint</code>: lints Markdown files</li> <li><code>markdown-link-check</code>: checks links in Markdown files work</li> <li><code>docs-deploy</code> and <code>docs-delete</code>: automate docs versioning</li> </ul> <p>Notes:</p> <ul> <li>tox is used to ensure that results can be replicated locally</li> <li>Not all jobs run every workflow call: see the <code>if</code> keyword in each job</li> <li>Some jobs depend on other jobs: see the <code>needs</code> keyword in each job</li> <li>Artifacts are used to access the coverage reports generated by <code>tests</code> in <code>coverage</code>:   storing workflow data as artifacts</li> </ul> CI workflow source code <p><code>.github/workflows/ci.yml</code></p> <pre><code>name: CI\non:\npull_request:\n# default types + closed\ntypes: [opened, synchronize, reopened, closed]\npush:\nbranches:\n- main\ndefaults:\nrun:\nshell: bash\nenv:\nPIP_DISABLE_PIP_VERSION_CHECK: 1\npermissions:\ncontents: write\njobs:\ntests:\nname: \"Run tests using python-${{ matrix.python-version }} on ${{ matrix.os }}\"\nruns-on: \"${{ matrix.os }}\"\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nstrategy:\nfail-fast: false\nmatrix:\nos: [ubuntu-latest, macos-latest, windows-latest]\npython-version: ['3.8', '3.9', '3.10', '3.11']\nsteps:\n- name: \"Check out the repo\"\nuses: \"actions/checkout@v4\"\n- name: \"Set up Python\"\nuses: \"actions/setup-python@v4\"\nwith:\npython-version: \"${{ matrix.python-version }}\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: \"Install dependencies\"\nrun: python -m pip install tox tox-gh-actions\n- name: \"Run tox for python-${{ matrix.python-version }} on ${{ matrix.os }}\"\nrun: python -m tox\n- name: \"Combine coverage data from tests\"\nif: (matrix.python-version == '3.10') &amp;&amp; (matrix.os == 'ubuntu-latest')\nrun: |\npython -m tox -e coverage\nexport TOTAL=$(python -c \"import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])\")\necho \"total=$TOTAL\" &gt;&gt; $GITHUB_ENV\necho \"### Total coverage: ${TOTAL}%\" &gt;&gt; $GITHUB_STEP_SUMMARY\n- name: \"Make coverage badge\"\nif: (matrix.python-version == '3.10') &amp;&amp; (matrix.os == 'ubuntu-latest') &amp;&amp; (github.repository == 'patrick-5546/xlbudget') &amp;&amp; (github.ref == 'refs/heads/main')\n# https://gist.github.com/patrick-5546/845b19d91f3d03c94677f6fae6eb414c\nuses: schneegans/dynamic-badges-action@v1.6.0\nwith:\n# GIST_TOKEN is a GitHub personal access token with scope \"gist\".\nauth: ${{ secrets.GIST_TOKEN }}\ngistID: 845b19d91f3d03c94677f6fae6eb414c   # replace with your real Gist id.\nfilename: covbadge-xlbudget.json\nlabel: Coverage\nmessage: ${{ env.total }}%\nminColorRange: 50\nmaxColorRange: 90\nvalColorRange: ${{ env.total }}\n- name: \"Upload HTML coverage report\"\nif: (matrix.python-version == '3.10') &amp;&amp; (matrix.os == 'ubuntu-latest')\nuses: actions/upload-artifact@v3\nwith:\nname: htmlcov\npath: htmlcov/\ndocs-build:\nname: Build Docs\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nsteps:\n- name: \"Check out the repo\"\nuses: \"actions/checkout@v4\"\n- name: \"Set up Python\"\nuses: \"actions/setup-python@v4\"\nwith:\npython-version: \"3.10\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: \"Install dependencies\"\nrun: python -m pip install tox tox-gh-actions\n- name: \"Build docs\"\nrun: python -m tox -e docs-build\n# https://github.com/nosborn/github-action-markdown-cli\nmarkdownlint:\nname: Lint Markdown\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: docs-build\nsteps:\n- name: Check out code\nuses: actions/checkout@v4\n- name: Lint markdown pages\nuses: nosborn/github-action-markdown-cli@v3\nwith:\nfiles: .\nconfig_file: '.markdownlint.json'\ndot: true\n# https://github.com/gaurav-nelson/github-action-markdown-link-check\nmarkdown-link-check:\nname: Check links in Markdown files\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: docs-build\nsteps:\n- name: Check out code\nuses: actions/checkout@v4\n- name: Check markdown pages for broken links\nuses: gaurav-nelson/github-action-markdown-link-check@v1\nwith:\nconfig-file: '.mlc_config.json'\nfolder-path: '.'\n# https://squidfunk.github.io/mkdocs-material/publishing-your-site/#with-github-actions\ndocs-deploy:\nname: Deploy Docs version\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: [tests, markdownlint, markdown-link-check]\nsteps:\n- name: Check out code\nuses: actions/checkout@v4\nwith:\n# checkout all commits to get accurate page revision times\n# for the git-revision-date-localized plugin\nfetch-depth: '0'\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: \"3.10\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: Cache downloaded files\nuses: actions/cache@v3\nwith:\nkey: ${{ github.ref }}\npath: .cache\n- name: Download HTML coverage report\nuses: actions/download-artifact@v3\nwith:\nname: htmlcov\npath: htmlcov\n- name: Install dependencies\nrun: python -m pip install -r requirements/docs.txt\n- name: \"Deploy pr-${{ github.event.number }} version of the Docs\"\nif: github.event_name == 'pull_request'\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike deploy --push pr-${{ github.event.number }}\n- name: Deploy main version of the Docs\nif: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike deploy --push --update-aliases main latest\ndocs-delete:\nname: Delete Docs version\nruns-on: ubuntu-latest\nif: github.event_name == 'pull_request' &amp;&amp; github.event.action == 'closed'\nsteps:\n- name: Check out code\nuses: actions/checkout@v4\nwith:\n# checkout all commits and branches to get gh-pages\nfetch-depth: '0'\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: \"3.10\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: Install dependencies\nrun: python -m pip install -r requirements/docs.txt\n- name: \"Delete pr-${{ github.event.number }} version of the Docs\"\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike delete --push pr-${{ github.event.number }}\n</code></pre>"},{"location":"developer_guide/github_actions/#release-workflow","title":"Release Workflow","text":"<p>TBD.</p> Release workflow source code <p><code>.github/workflows/release.yml</code></p> <pre><code># this file is *not* meant to cover or endorse the use of GitHub Actions, but rather to\n# help make automated releases for this project\nname: Release\non:\nrelease:\ntypes: [published]\njobs:\nbuild-and-publish:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v4\n- name: Set up Python\nuses: actions/setup-python@v4\nwith:\npython-version: '3.x'\n- name: Install build dependencies\nrun: python -m pip install -U setuptools wheel build\n- name: Build\nrun: python -m build .\n- name: Publish\nuses: pypa/gh-action-pypi-publish@master\nwith:\npassword: ${{ secrets.PYPI_API_TOKEN }}\n</code></pre>"},{"location":"developer_guide/releases/","title":"Releases","text":""},{"location":"developer_guide/releases/#preparing-for-your-first-release","title":"Preparing for your first release","text":"<ol> <li>Go through <code>pyproject.toml</code> and update the relevant fields</li> <li>In <code>tox.ini</code>, set <code>check-release</code> as a default environment by adding it to <code>envlist</code></li> <li>In this file, uncomment badges and uncomment and update their URLs with the package name    where applicable</li> <li>Create a repository secret named <code>PYPI_API_TOKEN</code> with the corresponding value</li> </ol>"},{"location":"developer_guide/releases/#publishing-a-new-release","title":"Publishing a new release","text":"<p>TBD.</p>"},{"location":"developer_guide/vscode/","title":"VS Code","text":""},{"location":"developer_guide/vscode/#setup-for-vs-code","title":"Setup for VS Code","text":"<ol> <li><code>cd</code> to the root directory of the repository</li> <li>Create the <code>dev</code> development environment:    <code>tox devenv -e dev .venv</code></li> <li>Open the repository in VS Code: <code>code .</code></li> <li>Install the recommended extensions</li> </ol>"},{"location":"developer_guide/vscode/#configuration-files","title":"Configuration Files","text":"<p>VS Code configuration files can be found in the <code>.vscode/</code> directory.</p> <ul> <li><code>cspell.json</code>: configuration for the spell checker</li> <li><code>extensions.json</code>: recommended extensions<ul> <li>See the recommended extensions by searching for \"@recommended\" in the Extensions view</li> </ul> </li> <li><code>google_docstring_custom_template.mustache</code>: a custom docstrings template for   autoDocstring   until this issue is resolved</li> <li><code>launch.json</code>: launch configurations<ul> <li>Run the launch configurations from the Run and Debug view</li> </ul> </li> <li><code>settings.json</code>: settings</li> </ul>"},{"location":"developer_guide/vscode/#shortcuts","title":"Shortcuts","text":"<p>Useful VS Code shortcuts that aren't specific to this repository.</p> <p>MacOS Shortcuts</p> <p>For keyboard shortcuts on MacOS, substitute Ctrl with Cmd.</p> <ul> <li>Open Quick Open: Ctrl+P<ul> <li>Search for files</li> <li>Open the command palette by typing \"&gt; \"</li> <li>Search for tasks by typing \"task \"</li> <li>Search for launch configurations by typing \"debug \"</li> </ul> </li> <li>Open Command Palette: Ctrl+Shift+P</li> </ul>"},{"location":"developer_guide/vscode/#integrations","title":"Integrations","text":""},{"location":"developer_guide/vscode/#docs","title":"Docs","text":"<p>Related recommended extensions enhance Markdown file previews, check for markdownlint errors, enhance VS Code Markdown support, add autocomplete for <code>mkdocs.yml</code>, and more:</p> <ul> <li>The enhanced Markdown file preview replaces VS Code's built-in preview</li> <li>The configuration file for markdownlint is <code>.markdownlint.json</code></li> <li>Format tables in a Markdown file with Alt+Shift+F<ul> <li>On Linux, the shortcut is Ctrl+Shift+I</li> </ul> </li> </ul> <p>There are also launch configurations to run the development server and open browsers:</p> Launch Configuration Description Serve Docs runs <code>mkdocs serve</code> Open Docs in Chrome runs <code>mkdocs serve</code> and open Docs in Chrome Open Docs in Edge runs <code>mkdocs serve</code> and open Docs in Microsoft Edge"},{"location":"developer_guide/vscode/#python","title":"Python","text":"<p>Related recommended extensions improve autocomplete, format on save, lint, test, and more:</p> <ul> <li>Adds autocomplete for docstrings, type hints, and functions</li> <li>Runs the black and isort   formatters when a file is saved</li> <li>Runs the flake8 and mypy   linters when a file is saved and after formatters run</li> <li>Run tests from the Testing view</li> </ul>"},{"location":"developer_guide/vscode/#common-extensions-settings","title":"Common Extensions &amp; Settings","text":"<p>Other recommended extensions further improve autocomplete (AI, file paths), check spelling, and show the commit and author who last modified the current line, and more:</p> <ul> <li>Mark a word as spelled correct by hovering over it, selecting <code>Quick Fix...</code>,   then selecting <code>Add \"&lt;word&gt;\" to config: .vscode/cspell.json</code></li> <li>Hover over the current line blame annoation at the end of the line for more details</li> </ul> <p>Common settings:</p> <ul> <li>Make whitespace at the end of the line visible</li> <li>Ruler at the line length limit</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>xlbudget<ul> <li>commands</li> <li>configure</li> <li>inputformat</li> <li>rwxlb</li> </ul> </li> </ul>"},{"location":"reference/xlbudget/","title":"xlbudget","text":"<p>Xlbudget: a personal bookkeeping assistant.</p>"},{"location":"reference/xlbudget/#xlbudget-functions","title":"Functions","text":""},{"location":"reference/xlbudget/#xlbudget.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Entry point for the application script.</p> Source code in <code>src/xlbudget/__init__.py</code> <pre><code>def main():\n\"Entry point for the application script.\"\nargs = setup()\ncmd = args.init(args)\ncmd.run()\n</code></pre>"},{"location":"reference/xlbudget/commands/","title":"commands","text":"<p>The commands, implemented as implementations of the abstract class <code>Command</code>.</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands-classes","title":"Classes","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command","title":"Command","text":"<p>         Bases: <code>ABC</code></p> <p>The abstract class that the command implementations implement.</p> <p>Class Attributes</p> Name Type Description <code>default_path</code> <code>str</code> <p>The default path of the xlbudget file.</p> <p>Attributes:</p> Name Type Description <code>trial</code> <code>bool</code> <p>If True, the xlbudget file will not be generated/modified.</p> <code>path</code> <code>str</code> <p>The path to the xlbudget file.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>class Command(ABC):\n\"\"\"The abstract class that the command implementations implement.\n    Attributes: Class Attributes\n        default_path (str): The default path of the xlbudget file.\n    Attributes:\n        trial (bool): If True, the xlbudget file will not be generated/modified.\n        path (str): The path to the xlbudget file.\n    \"\"\"\ndefault_path: str = \"xlbudget.xlsx\"\n@property\n@abstractmethod\ndef name(self) -&gt; str:\n\"\"\"Ensures that the `name` class attribute is defined in subclasses.\n        Part 1/2 of the abstract attribute implementation of `name`.\n        Reference: https://stackoverflow.com/a/53417582.\n        \"\"\"\nraise NotImplementedError\ndef get_name(self) -&gt; str:\n\"\"\"Used to access the `name` class attribute defined in subclasses.\n        Part 2/2 of the abstract attribute implementation of `name`.\n        Reference: https://stackoverflow.com/a/53417582.\n        \"\"\"\nreturn self.name\n@property\n@abstractmethod\ndef aliases(self) -&gt; List[str]:\n\"\"\"Ensures that the `aliases` class attribute is defined in subclasses.\n        Part 1/2 of the abstract attribute implementation of `aliases`.\n        Reference: https://stackoverflow.com/a/53417582.\n        \"\"\"\nraise NotImplementedError\ndef get_aliases(self) -&gt; List[str]:\n\"\"\"Used to access the `aliases` class attribute defined in subclasses.\n        Part 2/2 of the abstract attribute implementation of `aliases`.\n        Reference: https://stackoverflow.com/a/53417582.\n        \"\"\"\nreturn self.aliases\n@classmethod\ndef configure_common_args(cls, parser: ArgumentParser) -&gt; None:\n\"\"\"Configures the arguments that are used by all commands.\n        Args:\n            parser (ArgumentParser): The argument parser.\n        \"\"\"\nparser.add_argument(\n\"-t\",\n\"--trial\",\naction=\"store_true\",\nhelp=\"try a command without generating/updating the xlbudget file\",\n)\nparser.add_argument(\n\"-p\",\n\"--path\",\nhelp=\"path to the xlbudget file (default: %(default)s)\",\ndefault=cls.default_path,\n)\n@classmethod\n@abstractmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\npass\n@abstractmethod\ndef __init__(self, args: Namespace) -&gt; None:\nself.trial = args.trial\nself._check_path(args.path)\nself.path = args.path\n@staticmethod\ndef _check_path(path: str) -&gt; None:\n\"\"\"Check that `path` is a valid path to an xlbudget file.\n        Args:\n            path (str): The xlbudget path.\n        Raises:\n            ValueError: If `path` is not a XLSX file.\n            FileNotFoundError: If `path` is not in an existing directory.\n        \"\"\"\nxlsx_ext = \".xlsx\"\nif not path.endswith(xlsx_ext):\nraise ValueError(f\"Path '{path}' does not end with '{xlsx_ext}'\")\ndir = os.path.dirname(path)\nif dir and not os.path.isdir(dir):\nraise FileNotFoundError(f\"Directory '{dir}' does not exist\")\n@abstractmethod\ndef run(self) -&gt; None:\npass\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command-attributes","title":"Attributes","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.aliases","title":"aliases  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>aliases: List[str]\n</code></pre> <p>Ensures that the <code>aliases</code> class attribute is defined in subclasses. Part \u00bd of the abstract attribute implementation of <code>aliases</code>. Reference: https://stackoverflow.com/a/53417582.</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.name","title":"name  <code>abstractmethod</code> <code>property</code>","text":"<pre><code>name: str\n</code></pre> <p>Ensures that the <code>name</code> class attribute is defined in subclasses. Part \u00bd of the abstract attribute implementation of <code>name</code>. Reference: https://stackoverflow.com/a/53417582.</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command._check_path","title":"_check_path  <code>staticmethod</code>","text":"<pre><code>_check_path(path)\n</code></pre> <p>Check that <code>path</code> is a valid path to an xlbudget file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The xlbudget path.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>path</code> is not a XLSX file.</p> <code>FileNotFoundError</code> <p>If <code>path</code> is not in an existing directory.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>@staticmethod\ndef _check_path(path: str) -&gt; None:\n\"\"\"Check that `path` is a valid path to an xlbudget file.\n    Args:\n        path (str): The xlbudget path.\n    Raises:\n        ValueError: If `path` is not a XLSX file.\n        FileNotFoundError: If `path` is not in an existing directory.\n    \"\"\"\nxlsx_ext = \".xlsx\"\nif not path.endswith(xlsx_ext):\nraise ValueError(f\"Path '{path}' does not end with '{xlsx_ext}'\")\ndir = os.path.dirname(path)\nif dir and not os.path.isdir(dir):\nraise FileNotFoundError(f\"Directory '{dir}' does not exist\")\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.configure_common_args","title":"configure_common_args  <code>classmethod</code>","text":"<pre><code>configure_common_args(parser)\n</code></pre> <p>Configures the arguments that are used by all commands.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgumentParser</code> <p>The argument parser.</p> required Source code in <code>src/xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_common_args(cls, parser: ArgumentParser) -&gt; None:\n\"\"\"Configures the arguments that are used by all commands.\n    Args:\n        parser (ArgumentParser): The argument parser.\n    \"\"\"\nparser.add_argument(\n\"-t\",\n\"--trial\",\naction=\"store_true\",\nhelp=\"try a command without generating/updating the xlbudget file\",\n)\nparser.add_argument(\n\"-p\",\n\"--path\",\nhelp=\"path to the xlbudget file (default: %(default)s)\",\ndefault=cls.default_path,\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.get_aliases","title":"get_aliases","text":"<pre><code>get_aliases()\n</code></pre> <p>Used to access the <code>aliases</code> class attribute defined in subclasses. Part 2/2 of the abstract attribute implementation of <code>aliases</code>. Reference: https://stackoverflow.com/a/53417582.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>def get_aliases(self) -&gt; List[str]:\n\"\"\"Used to access the `aliases` class attribute defined in subclasses.\n    Part 2/2 of the abstract attribute implementation of `aliases`.\n    Reference: https://stackoverflow.com/a/53417582.\n    \"\"\"\nreturn self.aliases\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.get_name","title":"get_name","text":"<pre><code>get_name()\n</code></pre> <p>Used to access the <code>name</code> class attribute defined in subclasses. Part 2/2 of the abstract attribute implementation of <code>name</code>. Reference: https://stackoverflow.com/a/53417582.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>def get_name(self) -&gt; str:\n\"\"\"Used to access the `name` class attribute defined in subclasses.\n    Part 2/2 of the abstract attribute implementation of `name`.\n    Reference: https://stackoverflow.com/a/53417582.\n    \"\"\"\nreturn self.name\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate","title":"Generate","text":"<p>         Bases: <code>Command</code></p> <p>The <code>generate</code> command generates a new xlbudget file.</p> <p>Class Attributes</p> Name Type Description <code>name</code> <code>str</code> <p>The command's CLI name.</p> <code>aliases</code> <code>List[str]</code> <p>The command's CLI aliases.</p> <p>Attributes:</p> Name Type Description <code>force</code> <code>bool</code> <p>If True and file exists, will overwrite it.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>class Generate(Command):\n\"\"\"The `generate` command generates a new xlbudget file.\n    Attributes: Class Attributes\n        name (str): The command's CLI name.\n        aliases (List[str]): The command's CLI aliases.\n    Attributes:\n        force (bool): If True and file exists, will overwrite it.\n    \"\"\"\nname: str = \"generate\"\naliases: List[str] = [\"g\"]\n@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `generate` command.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"generate a new xlbudget file\",\ncmd_cls=Generate,\n)\nparser.add_argument(\n\"-f\", \"--force\", action=\"store_true\", help=\"overwrite file if it exists\"\n)\ndef __init__(self, args: Namespace) -&gt; None:\nsuper().__init__(args)\nif not args.force and os.path.exists(self.path):\nraise FileExistsError(\nf\"File {self.path} exists, run with -f/--force to overwrite\"\n)\nlogger.debug(f\"instance variables: {vars(self)}\")\ndef run(self) -&gt; None:\n\"\"\"Creates an empty xlbudget file populated with:\n        - A sheet for the current year.\n        Raises:\n            FileExistsError: If `self.force` is false and the file exists.\n        \"\"\"\n# create workbook without any sheets\nwb = Workbook()\nws = wb.active\n# ignore type mismatch of active worksheet\nwb.remove(ws)  # type: ignore[arg-type]\nyear = datetime.date.today().year\nlogger.info(f\"Creating {year} sheet\")\ncreate_year_sheet(wb, year)\nif not self.trial:\nlogger.info(f\"Saving xlbudget file to {self.path}\")\nwb.save(self.path)\nelse:\nlogger.info(f\"Trial run: not saving xlbudget file to {self.path}\")\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate.configure_args","title":"configure_args  <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Configures the argument parser for the <code>generate</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>src/xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `generate` command.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"generate a new xlbudget file\",\ncmd_cls=Generate,\n)\nparser.add_argument(\n\"-f\", \"--force\", action=\"store_true\", help=\"overwrite file if it exists\"\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate.run","title":"run","text":"<pre><code>run()\n</code></pre> <p>Creates an empty xlbudget file populated with:</p> <ul> <li>A sheet for the current year.</li> </ul> <p>Raises:</p> Type Description <code>FileExistsError</code> <p>If <code>self.force</code> is false and the file exists.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>def run(self) -&gt; None:\n\"\"\"Creates an empty xlbudget file populated with:\n    - A sheet for the current year.\n    Raises:\n        FileExistsError: If `self.force` is false and the file exists.\n    \"\"\"\n# create workbook without any sheets\nwb = Workbook()\nws = wb.active\n# ignore type mismatch of active worksheet\nwb.remove(ws)  # type: ignore[arg-type]\nyear = datetime.date.today().year\nlogger.info(f\"Creating {year} sheet\")\ncreate_year_sheet(wb, year)\nif not self.trial:\nlogger.info(f\"Saving xlbudget file to {self.path}\")\nwb.save(self.path)\nelse:\nlogger.info(f\"Trial run: not saving xlbudget file to {self.path}\")\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update","title":"Update","text":"<p>         Bases: <code>Command</code></p> <p>The <code>update</code> command updates an existing xlbudget file.</p> <p>Class Attributes</p> Name Type Description <code>name</code> <code>str</code> <p>The command's CLI name.</p> <code>aliases</code> <code>List[str]</code> <p>The command's CLI aliases.</p> <p>Attributes:</p> Name Type Description <code>input</code> <code>str</code> <p>The path to the input file.</p> <code>format</code> <code>inputformat.InputFormat</code> <p>The input file format.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>class Update(Command):\n\"\"\"The `update` command updates an existing xlbudget file.\n    Attributes: Class Attributes\n        name (str): The command's CLI name.\n        aliases (List[str]): The command's CLI aliases.\n    Attributes:\n        input (str): The path to the input file.\n        format (inputformat.InputFormat): The input file format.\n    \"\"\"\nname: str = \"update\"\naliases: List[str] = [\"u\"]\n@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `update` command.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"update an existing xlbudget file\",\ncmd_cls=Update,\n)\nparser.add_argument(\"input\", help=\"path to the input file\")\nparser.add_argument(\n\"format\",\naction=GetInputFormats,\nchoices=GetInputFormats.input_formats.keys(),\nhelp=\"select an input file format\",\n)\ndef __init__(self, args: Namespace) -&gt; None:\nsuper().__init__(args)\nself._check_input(args.input)\nself.input = args.input\nself.format = args.format\nlogger.debug(f\"instance variables: {vars(self)}\")\n@staticmethod\ndef _check_input(input: str) -&gt; None:\n\"\"\"Check that `input` is a valid path to an input file.\n        Args:\n            input (str): The input path.\n        Raises:\n            ValueError: If `input` is not a CSV file.\n            ValueError: If `input` is not an existing file.\n        \"\"\"\ncsv_ext = \".csv\"\nif not input.endswith(csv_ext):\nraise ValueError(f\"Input '{input}' does not end with '{csv_ext}'\")\nif not os.path.isfile(input):\nraise ValueError(f\"Input '{input}' is not an existing file\")\ndef run(self) -&gt; None:\nlogger.info(f\"Parsing input file {self.input}\")\ndf = parse_input(self.input, self.format)\nlogger.debug(f\"input file: {df.shape=}, df.dtypes=\\n{df.dtypes}\")\nlogger.debug(f\"df.head()=\\n{df.head()}\")\nlogger.info(f\"Loading xlbudget file {self.path}\")\nwb = load_workbook(self.path)\nlogger.info(\"Updating xlbudget file\")\nupdate_xlbudget(wb, df)\nif not self.trial:\nlogger.info(f\"Saving xlbudget file to {self.path}\")\nwb.save(self.path)\nelse:\nlogger.info(f\"Trial run: not saving xlbudget file to {self.path}\")\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update._check_input","title":"_check_input  <code>staticmethod</code>","text":"<pre><code>_check_input(input)\n</code></pre> <p>Check that <code>input</code> is a valid path to an input file.</p> <p>Parameters:</p> Name Type Description Default <code>input</code> <code>str</code> <p>The input path.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If <code>input</code> is not a CSV file.</p> <code>ValueError</code> <p>If <code>input</code> is not an existing file.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>@staticmethod\ndef _check_input(input: str) -&gt; None:\n\"\"\"Check that `input` is a valid path to an input file.\n    Args:\n        input (str): The input path.\n    Raises:\n        ValueError: If `input` is not a CSV file.\n        ValueError: If `input` is not an existing file.\n    \"\"\"\ncsv_ext = \".csv\"\nif not input.endswith(csv_ext):\nraise ValueError(f\"Input '{input}' does not end with '{csv_ext}'\")\nif not os.path.isfile(input):\nraise ValueError(f\"Input '{input}' is not an existing file\")\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update.configure_args","title":"configure_args  <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Configures the argument parser for the <code>update</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>src/xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `update` command.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"update an existing xlbudget file\",\ncmd_cls=Update,\n)\nparser.add_argument(\"input\", help=\"path to the input file\")\nparser.add_argument(\n\"format\",\naction=GetInputFormats,\nchoices=GetInputFormats.input_formats.keys(),\nhelp=\"select an input file format\",\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands._add_parser","title":"_add_parser","text":"<pre><code>_add_parser(subparsers, name, aliases, help, cmd_cls)\n</code></pre> <p>Adds an argument parser for a command. Any configuration that is common across commands should go here.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The subparsers object.</p> required <code>name</code> <code>str</code> <p>The command name.</p> required <code>aliases</code> <code>List[str]</code> <p>The command aliases.</p> required <code>help</code> <code>str</code> <p>The command help message.</p> required <code>cmd_cls</code> <code>Type[Command]</code> <p>The command class.</p> required <p>Returns:</p> Type Description <code>ArgumentParser</code> <p>A[n] <code>ArgumentParser</code> for a command.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>def _add_parser(\nsubparsers: _SubParsersAction,\nname: str,\naliases: List[str],\nhelp: str,\ncmd_cls: Type[Command],\n) -&gt; ArgumentParser:\n\"\"\"Adds an argument parser for a command. Any configuration that is common\n    across commands should go here.\n    Args:\n        subparsers (_SubParsersAction): The subparsers object.\n        name (str): The command name.\n        aliases (List[str]): The command aliases.\n        help (str): The command help message.\n        cmd_cls (Type[Command]): The command class.\n    Returns:\n        A[n] `ArgumentParser` for a command.\n    \"\"\"\nparser = subparsers.add_parser(name, aliases=aliases, help=help)\n# initialize the command with args.init(...)\nparser.set_defaults(init=cmd_cls)\nreturn parser\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.get_command_classes","title":"get_command_classes","text":"<pre><code>get_command_classes()\n</code></pre> <p>Gets all classes that implement the <code>Command</code> abstract class.</p> <p>Returns:</p> Type Description <code>List[Type[Command]]</code> <p>A[n] <code>List[Type[Command]]</code> of all command classes.</p> Source code in <code>src/xlbudget/commands.py</code> <pre><code>def get_command_classes() -&gt; List[Type[Command]]:\n\"\"\"Gets all classes that implement the `Command` abstract class.\n    Returns:\n        A[n] `List[Type[Command]]` of all command classes.\n    \"\"\"\ncommand_module = sys.modules[__name__]\nreturn [getattr(command_module, c.__name__) for c in Command.__subclasses__()]\n</code></pre>"},{"location":"reference/xlbudget/configure/","title":"configure","text":"<p>The setup and configuration for xlbudget.</p> Logger usage in this file <p>The logger can only be used after <code>_configure_logger</code> is called in <code>setup</code>.</p>"},{"location":"reference/xlbudget/configure/#xlbudget.configure-classes","title":"Classes","text":""},{"location":"reference/xlbudget/configure/#xlbudget.configure-functions","title":"Functions","text":""},{"location":"reference/xlbudget/configure/#xlbudget.configure._configure_argument_parser","title":"_configure_argument_parser","text":"<pre><code>_configure_argument_parser()\n</code></pre> <p>Configures the argument parser for all arguments.</p> <p>Returns:</p> Type Description <code>ArgumentParser</code> <p>A[n] <code>ArgumentParser</code> configured for this package.</p> Source code in <code>src/xlbudget/configure.py</code> <pre><code>def _configure_argument_parser() -&gt; ArgumentParser:\n\"\"\"Configures the argument parser for all arguments.\n    Returns:\n        A[n] `ArgumentParser` configured for this package.\n    \"\"\"\nparser = ArgumentParser()\nCommand.configure_common_args(parser)\n_configure_logger_args(parser)\ncmd_subparsers = parser.add_subparsers(\ntitle=\"command\",\nrequired=True,\ndescription=\"The xlbudget command to run.\",\n)\nfor cmd_cls in get_command_classes():\ncmd_cls.configure_args(cmd_subparsers)\nreturn parser\n</code></pre>"},{"location":"reference/xlbudget/configure/#xlbudget.configure._configure_logger","title":"_configure_logger","text":"<pre><code>_configure_logger(level)\n</code></pre> <p>Configures the logger.</p> <p>Since this configuration is global, there is no need to return the logger. To use the logger in a file, add <code>logger = logging.getLogger(__name__)</code> at the top.</p> <p>Parameters:</p> Name Type Description Default <code>level</code> <code>int</code> <p>The logging level.</p> required Source code in <code>src/xlbudget/configure.py</code> <pre><code>def _configure_logger(level: int) -&gt; None:\n\"\"\"Configures the logger.\n    Since this configuration is global, there is no need to return the logger.\n    To use the logger in a file, add `logger = logging.getLogger(__name__)` at the top.\n    Args:\n        level (int): The [logging level](https://docs.python.org/3/library/logging.html#logging-levels).\n    \"\"\"  # noqa\nlogging.basicConfig(\nlevel=level,\nformat=\"%(levelname)s - %(name)s:%(lineno)s - %(message)s\",\n)\n</code></pre>"},{"location":"reference/xlbudget/configure/#xlbudget.configure._configure_logger_args","title":"_configure_logger_args","text":"<pre><code>_configure_logger_args(parser)\n</code></pre> <p>Configures the argument parser for logger arguments. The log level configuration was adapted from this Stack Overflow answer.</p> <p>Parameters:</p> Name Type Description Default <code>parser</code> <code>ArgumentParser</code> <p>The argument parser to update.</p> required Source code in <code>src/xlbudget/configure.py</code> <pre><code>def _configure_logger_args(parser: ArgumentParser) -&gt; None:\n\"\"\"Configures the argument parser for logger arguments.\n    The log level configuration was adapted from\n    [this Stack Overflow answer](https://stackoverflow.com/a/20663028).\n    Args:\n        parser (ArgumentParser): The argument parser to update.\n    \"\"\"\ngroup_log = parser.add_argument_group(\n\"logger configuration\",\ndescription=\"Arguments that override the default logger configuration.\",\n)\ngroup_log_lvl = group_log.add_mutually_exclusive_group()\ngroup_log_lvl.add_argument(\n\"-d\",\n\"--debug\",\nhelp=\"print lots of debugging statements; can't use with -v/--verbose\",\naction=\"store_const\",\ndest=\"log_level\",\nconst=logging.DEBUG,\ndefault=logging.WARNING,\n)\ngroup_log_lvl.add_argument(\n\"-v\",\n\"--verbose\",\nhelp=\"be verbose; can't use with -d/--debug\",\naction=\"store_const\",\ndest=\"log_level\",\nconst=logging.INFO,\n)\n</code></pre>"},{"location":"reference/xlbudget/configure/#xlbudget.configure.setup","title":"setup","text":"<pre><code>setup()\n</code></pre> <p>Package-level setup and configuration.</p> <p>Returns:</p> Type Description <code>Namespace</code> <p>A[n] <code>Namespace</code> containing the parsed CLI arguments.</p> Source code in <code>src/xlbudget/configure.py</code> <pre><code>def setup() -&gt; Namespace:\n\"\"\"Package-level setup and configuration.\n    Returns:\n        A[n] `Namespace` containing the parsed CLI arguments.\n    \"\"\"\nparser = _configure_argument_parser()\nargs = parser.parse_args()\n_configure_logger(args.log_level)\n# log args after call to _configure_logger\nlogger = logging.getLogger(__name__)\nlogger.debug(f\"parsed CLI arguments: {args}\")\nreturn args\n</code></pre>"},{"location":"reference/xlbudget/inputformat/","title":"inputformat","text":"<p>Input file format definitions.</p>"},{"location":"reference/xlbudget/inputformat/#xlbudget.inputformat-classes","title":"Classes","text":""},{"location":"reference/xlbudget/inputformat/#xlbudget.inputformat.GetInputFormats","title":"GetInputFormats","text":"<p>         Bases: <code>Action</code></p> <p>Argparse action for the format argument. Adapted from this Stack Overflow answer.</p> <p>Attributes:</p> Name Type Description <code>input_formats</code> <code>Dict[str, InputFormat]</code> <p>Maps format names to values.</p> Source code in <code>src/xlbudget/inputformat.py</code> <pre><code>class GetInputFormats(Action):\n\"\"\"Argparse action for the format argument.\n    Adapted from [this Stack Overflow answer](https://stackoverflow.com/a/50799463).\n    Attributes:\n        input_formats (Dict[str, InputFormat]): Maps format names to values.\n    \"\"\"\ninput_formats: Dict[str, InputFormat] = {\nn: globals()[n] for n in globals() if isinstance(globals()[n], InputFormat)\n}\ndef __call__(self, parser, namespace, values, option_string=None):\nsetattr(namespace, self.dest, self.input_formats[values])\n</code></pre>"},{"location":"reference/xlbudget/inputformat/#xlbudget.inputformat.InputFormat","title":"InputFormat","text":"<p>         Bases: <code>NamedTuple</code></p> <p>Specifies the format of the input file.</p> <p>Attributes:</p> Name Type Description <code>header</code> <code>int</code> <p>The 0-indexed row of the header in the input file.</p> <code>names</code> <code>List[str]</code> <p>The column names.</p> <code>usecols</code> <code>List[int]</code> <p>The indices of columns that map to <code>COLUMNS</code>.</p> <code>ignores</code> <code>List[str]</code> <p>Ignore transactions that start with these strings.</p> Source code in <code>src/xlbudget/inputformat.py</code> <pre><code>class InputFormat(NamedTuple):\n\"\"\"Specifies the format of the input file.\n    Attributes:\n        header (int): The 0-indexed row of the header in the input file.\n        names (List[str]): The column names.\n        usecols (List[int]): The indices of columns that map to `COLUMNS`.\n        ignores (List[str]): Ignore transactions that start with these strings.\n    \"\"\"\nheader: int\nnames: List[str]\nusecols: List[int]\nignores: List[str]\ndef get_usecols_names(self):\nreturn [self.names[i] for i in self.usecols]\n</code></pre>"},{"location":"reference/xlbudget/inputformat/#xlbudget.inputformat-functions","title":"Functions","text":""},{"location":"reference/xlbudget/inputformat/#xlbudget.inputformat.parse_input","title":"parse_input","text":"<pre><code>parse_input(path, format)\n</code></pre> <p>Parses an input file.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the input file.</p> required <code>format</code> <code>InputFormat</code> <p>The input file format.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If input file contains duplicate transactions.</p> <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A[n] <code>pd.DataFrame</code> where the columns match the xlbudget file's column names.</p> Source code in <code>src/xlbudget/inputformat.py</code> <pre><code>def parse_input(path: str, format: InputFormat) -&gt; pd.DataFrame:\n\"\"\"Parses an input file.\n    Args:\n        path (str): The path to the input file.\n        format (InputFormat): The input file format.\n    Raises:\n        ValueError: If input file contains duplicate transactions.\n    Returns:\n        A[n] `pd.DataFrame` where the columns match the xlbudget file's column names.\n    \"\"\"\ndf = pd.read_csv(\npath,\nheader=format.header,\nusecols=format.usecols,\nparse_dates=[0],\nskip_blank_lines=False,\n)\ndf = df_drop_na(df)\n# TODO: write issues to make ignoring duplicate transactions interactive\n# they might not be an error\n# TODO: investigate autocompletions\nif df.duplicated().any():\nraise ValueError(\"Input file contains duplicate transactions\")\ndf.columns = df.columns.str.strip()\n# order to match `COLUMNS`\ndf = df[format.get_usecols_names()]\n# rename to match `COLUMNS`\ndf = df.set_axis([c.name for c in COLUMNS], axis=\"columns\")\n# drop ignored transactions\nfor ignore in format.ignores:\ndf = df_drop_ignores(df, ignore)\nreturn df\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/","title":"rwxlb","text":"<p>xlbudget file reading and writing.</p>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb-classes","title":"Classes","text":""},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.TablePosition","title":"TablePosition","text":"<p>The state and bounds of a worksheet table. Read-only fields were implemented with properties that return mangled variables.</p> Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>class TablePosition:\n\"\"\"The state and bounds of a worksheet table.\n    Read-only fields were implemented with properties that return mangled variables.\n    \"\"\"\ndef __init__(self, ref: str) -&gt; None:\n# excel ref format: \"&lt;top left cell coordinate&gt;:&lt;bottom right cell coordinate&gt;\"\nstart, end = ref.split(\":\")\nself.__first_col, self.__header_row = coordinate_from_string(start)\nself.next_row = self.__header_row + 1\nself.__first_col_ind = column_index_from_string(self.__first_col)\nself.__last_col, self.__initial_last_row = coordinate_from_string(end)\n@property\ndef first_col(self) -&gt; int:\nreturn self.__first_col_ind\n@property\ndef initial_last_row(self) -&gt; int:\nreturn self.__initial_last_row\ndef __repr__(self) -&gt; str:\nreturn (\nf\"{self.__class__.__name__}(next_row={self.next_row}, \"\nf\"first_col={self.first_col}, initial_last_row={self.initial_last_row})\"\n)\ndef get_ref(self) -&gt; str:\n# Excel tables must have at least 2 rows: 1 header and 1+ data. `last_row` is\n# implemented as follows so that `next_row` can be incremented consistently.\nlast_row = (\nself.next_row - 1\nif self.next_row - 1 &gt;= self.__header_row + 1\nelse self.__header_row + 1\n)\nreturn f\"{self.__first_col}{self.__header_row}:{self.__last_col}{last_row}\"\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb-functions","title":"Functions","text":""},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.create_year_sheet","title":"create_year_sheet","text":"<pre><code>create_year_sheet(wb, year)\n</code></pre> <p>Creates a year sheet, with a table for each month.</p> <p>Parameters:</p> Name Type Description Default <code>wb</code> <code>openpyxl.workbook.workbook.Workbook</code> <p>The workbook to create the sheet in.</p> required <code>year</code> <code>int</code> <p>The year.</p> required <p>Raises:</p> Type Description <code>ValueError</code> <p>If year sheet <code>year</code> already exists in the workbook <code>wb</code>.</p> Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>def create_year_sheet(wb: Workbook, year: int) -&gt; None:\n\"\"\"Creates a year sheet, with a table for each month.\n    Args:\n        wb (openpyxl.workbook.workbook.Workbook): The workbook to create the sheet in.\n        year (int): The year.\n    Raises:\n        ValueError: If year sheet `year` already exists in the workbook `wb`.\n    \"\"\"\nindex = 0\nyear_str = str(year)\nif year_str in wb.sheetnames:\nraise ValueError(f\"Year sheet {year_str} already exists\")\nlogger.debug(f\"Creating sheet {year_str} at {index=}\")\nws = wb.create_sheet(year_str, index)\nnum_tables = len(MONTH_NAME_0_IND)\nfor c_start in range(1, (len(COLUMNS) + 1) * num_tables + 1, len(COLUMNS) + 1):\nmonth_ind = c_start // (len(COLUMNS) + 1)\nmonth = MONTH_NAME_0_IND[month_ind]\ntable_name = _get_table_name(month, year_str)\nlogger.debug(f\"creating {table_name} table\")\n# table title\nws.cell(row=1, column=c_start).value = month\nws.merge_cells(\nstart_row=1,\nstart_column=c_start,\nend_row=1,\nend_column=c_start + len(COLUMNS) - 2,\n)\n# table sum\nsum = ws.cell(row=1, column=c_start + len(COLUMNS) - 1)\nsum.value = f\"=SUM({table_name}[{COLUMNS[-1].name}])\"\nsum.number_format = FORMAT_ACCOUNTING\nlogger.debug(f\"created sum cell {sum.coordinate}='{sum.value}'\")\n# table header and formating\nfor i in range(len(COLUMNS)):\nc = c_start + i\n# header\nws.cell(row=2, column=c).value = COLUMNS[i].name\n# column format\ncell = ws.cell(row=3, column=c)\nif COLUMNS[i].format:\ncell.number_format = COLUMNS[i].format\n# column width\nws.column_dimensions[get_column_letter(c)].width = COLUMNS[i].width\n# create table\nc_start_ltr = get_column_letter(c_start)\nc_end_ltr = get_column_letter(c_start + len(COLUMNS) - 1)\nref = f\"{c_start_ltr}2:{c_end_ltr}3\"\nlogger.debug(f\"creating table {table_name} with {ref=}\")\ntab = Table(displayName=table_name, ref=ref)\n# add a default style with striped rows and banded columns\nstyle = TableStyleInfo(\nname=\"TableStyleMedium9\",\nshowFirstColumn=False,\nshowLastColumn=False,\nshowRowStripes=True,\nshowColumnStripes=True,\n)\ntab.tableStyleInfo = style\nws.add_table(tab)\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.df_drop_duplicates","title":"df_drop_duplicates","text":"<pre><code>df_drop_duplicates(df)\n</code></pre> <p>Checks for duplicate rows, dropping them in place if any.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>The original dataframe.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A[n] <code>pd.DataFrame</code> without any duplicate rows.</p> Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>def df_drop_duplicates(df: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Checks for duplicate rows, dropping them in place if any.\n    Args:\n        df (pd.DataFrame): The original dataframe.\n    Returns:\n        A[n] `pd.DataFrame` without any duplicate rows.\n    \"\"\"\nduplicated = df.duplicated()\nduplicates = df[duplicated]\nif not duplicates.empty:\nlogger.warning(f\"Dropping duplicate transactions:\\n{duplicates}\")\nreturn df[~duplicated]\nreturn df\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.df_drop_ignores","title":"df_drop_ignores","text":"<pre><code>df_drop_ignores(df, ignore)\n</code></pre> <p>Checks for rows that start with <code>ignore</code>, dropping them in place if any.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>The original dataframe.</p> required <code>ignore</code> <code>str</code> <p>The string that begins descriptions to ignore.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A[n] <code>pd.DataFrame</code> without any rows that start with <code>ignore</code>.</p> Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>def df_drop_ignores(df: pd.DataFrame, ignore: str) -&gt; pd.DataFrame:\n\"\"\"Checks for rows that start with `ignore`, dropping them in place if any.\n    Args:\n        df (pd.DataFrame): The original dataframe.\n        ignore (str): The string that begins descriptions to ignore.\n    Returns:\n        A[n] `pd.DataFrame` without any rows that start with `ignore`.\n    \"\"\"\nignored = df[\"Description\"].str.startswith(ignore)\nignores = df[ignored]\nif not ignores.empty:\nlogger.warning(f\"Dropping ignored transactions:\\n{ignores}\")\nreturn df[~ignored].reset_index(drop=True)\nreturn df\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.df_drop_na","title":"df_drop_na","text":"<pre><code>df_drop_na(df)\n</code></pre> <p>Checks for rows that contain only <code>na</code> values, dropping them in place if any.</p> <p>Parameters:</p> Name Type Description Default <code>df</code> <code>pd.DataFrame</code> <p>The original dataframe.</p> required <p>Returns:</p> Type Description <code>pd.DataFrame</code> <p>A[n] <code>pd.DataFrame</code> without any rows that are entirely <code>na</code>.</p> Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>def df_drop_na(df: pd.DataFrame) -&gt; pd.DataFrame:\n\"\"\"Checks for rows that contain only `na` values, dropping them in place if any.\n    Args:\n        df (pd.DataFrame): The original dataframe.\n    Returns:\n        A[n] `pd.DataFrame` without any rows that are entirely `na`.\n    \"\"\"\nna = df.isna().all(axis=1)\nnas = df[na]\nif not nas.empty:\nlogger.warning(f\"Dropping rows that contain only `na` values:\\n{nas}\")\nreturn df[~na].reset_index(drop=True)\nreturn df\n</code></pre>"},{"location":"reference/xlbudget/rwxlb/#xlbudget.rwxlb.update_xlbudget","title":"update_xlbudget","text":"<pre><code>update_xlbudget(wb, df)\n</code></pre> <p>Updates an xlbudget file.</p> <p>Parameters:</p> Name Type Description Default <code>wb</code> <code>openpyxl.workbook.workbook.Workbook</code> <p>The xlbudget workbook.</p> required <code>df</code> <code>pd.DataFrame</code> <p>The input file dataframe.</p> required Source code in <code>src/xlbudget/rwxlb.py</code> <pre><code>def update_xlbudget(wb: Workbook, df: pd.DataFrame):\n\"\"\"Updates an xlbudget file.\n    Args:\n        wb (openpyxl.workbook.workbook.Workbook): The xlbudget workbook.\n        df (pd.DataFrame): The input file dataframe.\n    \"\"\"\noldest_date, newest_date = df[df.columns[0]].agg([\"min\", \"max\"])\nlogger.debug(f\"{oldest_date=}, {newest_date=}\")\n# create year sheets as needed\nfor year in range(oldest_date.year, newest_date.year + 1):\nif str(year) not in wb.sheetnames:\nlogger.info(f\"Creating {year} sheet\")\ncreate_year_sheet(wb, year)\n# initialize table positions dictionary\n# maps worksheet names to dictionaries that map table names to their position.\ntable_pos: Dict[str, Dict[str, TablePosition]] = {}\nfor year in range(oldest_date.year, newest_date.year + 1):\nsheet_name = str(year)\ntable_pos[sheet_name] = {}\nstart_month = oldest_date.month if year == oldest_date.year else 1\nend_month = newest_date.month if year == newest_date.year else 12\nfor month in range(start_month, end_month + 1):\nmonth_name = calendar.month_name[month]\ntable_name = _get_table_name(month=month_name, year=sheet_name)\nlogger.debug(f\"Initializing table {table_name} in sheet {sheet_name}\")\nref = wb[sheet_name].tables[table_name].ref\ntable_pos[sheet_name][table_name] = TablePosition(ref)\n# update df with transactions in wb\nlogger.debug(f\"{df.shape=} before checking existing transactions\")\nfor sheet_name in table_pos.keys():\nws = wb[sheet_name]\nfor pos in table_pos[sheet_name].values():\nis_populated = bool(ws.cell(row=pos.next_row, column=pos.first_col).value)\nif is_populated:\nfor r in range(pos.next_row, pos.initial_last_row + 1):\ntransaction = []\nfor i in range(len(COLUMNS)):\nc = pos.first_col + i\ntransaction.append(ws.cell(row=r, column=c).value)\nlogger.debug(f\"Appending {transaction=} to dataframe\")\n# ignore mypy error and implicitly cast to df.dtypes\ndf.loc[len(df) + 1] = transaction  # type: ignore[call-overload]\ndf = df_drop_duplicates(df)\n# re-sort transactions to make the oldest transactions come first\ndf = df.sort_values(by=list(df.columns), ascending=True)\nlogger.debug(f\"{df.shape=} after checking existing transactions\")\n# write dataframe to wb\nfor row in df.itertuples(index=False):\nlogger.debug(f\"Writing transaction {row} to workbook\")\n# get worksheet and table position\nsheet_name, month_name = str(row.Date.year), calendar.month_name[row.Date.month]\ntable_name = _get_table_name(month=month_name, year=sheet_name)\nws, pos = wb[sheet_name], table_pos[sheet_name][table_name]\n# set date cell\ndate_cell = ws.cell(row=pos.next_row, column=pos.first_col)\ndate_cell.value = row.Date\ndate_cell.number_format = FORMAT_DATE\n# set description cell\nws.cell(row=pos.next_row, column=pos.first_col + 1).value = row.Description\n# set amount cell\namount_cell = ws.cell(row=pos.next_row, column=pos.first_col + 2)\namount_cell.value = row.Amount\namount_cell.number_format = FORMAT_ACCOUNTING\npos.next_row += 1\n# update table refs\nfor sheet_name in table_pos.keys():\nfor table_name, pos in table_pos[sheet_name].items():\ntab = wb[sheet_name].tables[table_name]\nref = pos.get_ref()\nif ref != tab.ref:\nlogger.debug(\nf\"Updating ref of table {tab.name} from {tab.ref} to {ref}\"\n)\ntab.ref = pos.get_ref()\n</code></pre>"},{"location":"user_guide/commands/","title":"Commands","text":""},{"location":"user_guide/configuration/","title":"Configuration","text":""},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/installation/","title":"Installation","text":""}]}