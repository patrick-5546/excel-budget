{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"/]+|(?!\\b)(?=[A-Z][a-z])|\\.(?!\\d)|&[lg]t;","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Excel Budget","text":"<p>Xlbudget is a personal bookkeeping assistant that is in active development.</p>"},{"location":"coverage/","title":"Coverage Report","text":""},{"location":"license/","title":"License","text":"<pre><code>Copyright (c) 2016 The Python Packaging Authority (PyPA)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n</code></pre>"},{"location":"developer_guide/contributing/","title":"Contributing","text":"<p>This repository's infrastructure features pinned dependency management, a documentation site, an automated release process, GitHub integration, VS Code integration, and much more.</p>"},{"location":"developer_guide/contributing/#setup-for-local-development","title":"Setup for Local Development","text":"<ol> <li>Install tox</li> <li>Clone the repository</li> </ol>"},{"location":"developer_guide/contributing/#tox","title":"Tox","text":"<p>tox is used to automate and standardize testing across local development environments and CI/CD pipelines.</p>"},{"location":"developer_guide/contributing/#tox-configuration","title":"Tox Configuration","text":"<p>The tox configuration for this repository can be found in <code>tox.ini</code>.</p>"},{"location":"developer_guide/contributing/#tox-environments","title":"Tox Environments","text":"<p>Each tox environment accomplishes a specific purpose. List all tox environments and their descriptions with <code>tox list</code>.</p> <p>Details about each environment are given below:</p> <ul> <li><code>py*</code>: for a particular python version, it<ol> <li>checks if the package can be built (may be commented out),</li> <li>runs the linters,</li> <li>runs the test suite, and</li> <li>generates a coverage report source file <code>.coverage</code></li> </ol> </li> <li><code>check-release</code>: checks that the package is ready to be released</li> <li><code>coverage</code>: converts <code>.coverage</code> to human readable formats<ul> <li><code>html</code>: used to create the Coverage Report page</li> <li><code>json</code>: used to create the coverage badge in the README</li> </ul> </li> <li><code>dev</code>: used to create a development environment with all dependencies installed<ul> <li>When in the development environment, the commands that are run in each environment   can be run in your terminal</li> </ul> </li> <li><code>docs-build</code>: builds the docs to ensure that they are in a valid state</li> <li><code>docs-serve</code>: runs the docs development server</li> <li><code>format</code>: runs the formatters</li> <li><code>upgrade</code>: updates the dependencies</li> </ul>"},{"location":"developer_guide/contributing/#running-tox-environments","title":"Running Tox Environments","text":"<ul> <li><code>tox -e &lt;environment&gt;</code> will run a single environment</li> <li><code>tox</code> will run all the default environments as noted by <code>tox list</code><ul> <li>To set an environment as default, add it to <code>envlist</code> in <code>tox.ini</code></li> </ul> </li> </ul> <p>Known issues running tox environments:</p> Environment Issue Solution <code>coverage</code> <code>coverage combine</code> outputs \"No data to combine\" <code>coverage</code> cannot be run independently, as it needs <code>.coverage</code> from <code>testenv</code>: run <code>tox</code> instead. If you are still getting this error, remove <code>.coverage</code> and rerun."},{"location":"developer_guide/contributing/#tox-development-environments","title":"Tox Development Environments","text":"<p>The <code>tox devenv</code> command will create a virtual environment and install the environment's dependencies in it.</p> <ul> <li>To create a virtual environment with all dependencies installed,   run <code>tox devenv -e dev .venv</code>.</li> <li>Using a virtual environment: activate Python virtual environments</li> </ul>"},{"location":"developer_guide/contributing/#dependencies","title":"Dependencies","text":"<p>Dependencies are defined in <code>pyproject.toml</code>. They are pinned and managed using pip-tools. The pinned dependencies can be found in <code>requirements/</code>.</p>"},{"location":"developer_guide/contributing/#how-to-add-or-update-dependencies","title":"How to Add or Update Dependencies","text":"<ol> <li>To add a dependency, add it in <code>pyproject.toml</code>;    where you add the dependency depends on what type of dependency it is:<ul> <li>Add project dependencies to the <code>dependencies</code> list</li> <li>Add environment-specific dependencies to the corresponding list   below <code>[project.optional-dependencies]</code></li> </ul> </li> <li>Run the <code>upgrade</code> tox environment: <code>tox -e upgrade</code></li> <li>Verify that the tests still pass: <code>tox</code></li> <li>If you are using the development environment, recreate it: <code>tox devenv -e dev .venv</code></li> <li>Commit and push the changes</li> </ol>"},{"location":"developer_guide/docs/","title":"Docs","text":"<p>The Docs were created using Material for MkDocs, a Markdown static site generator with a material design theme.</p>"},{"location":"developer_guide/docs/#running-docs-locally","title":"Running Docs Locally","text":"<ol> <li>Create and use the <code>dev</code> development environment</li> <li>Run the development server: <code>mkdocs serve</code><ul> <li>If you are using VS Code, see the VS Code Integration page</li> </ul> </li> </ol>"},{"location":"developer_guide/docs/#building-for-offline-usage","title":"Building for Offline Usage","text":"<p>To build for offline usage, uncomment the <code>offline</code> plugin in <code>mkdocs.yml</code> before running <code>mkdocs build</code>. For what this does, refer to the related Material for Mkdocs docs page.</p>"},{"location":"developer_guide/docs/#features","title":"Features","text":""},{"location":"developer_guide/docs/#automatic-documentation-from-sources","title":"Automatic Documentation from Sources","text":"<p>mkdocstrings was used to create the Code Reference section of the Docs.</p> <p>incompatible <code>theme.features</code></p> <p>mkdocstrings is not compatible with <code>theme.features.navigation.indexes</code>.</p>"},{"location":"developer_guide/docs/#versioning","title":"Versioning","text":"<p>The Docs site has the following versions:</p> <ul> <li>Version from branches<ul> <li><code>main</code>: aliased to <code>latest</code><ul> <li>Whenever you are on a version other than <code>latest</code>, a warning will be displayed   above the header</li> </ul> </li> <li><code>pr-&lt;pr number&gt;</code>:<ul> <li>Created when a pull request is opened</li> <li>Updated when the pull request commits are modified</li> <li>Deleted when the pull request is closed</li> </ul> </li> </ul> </li> <li>Version from releases: <code>&lt;x.x&gt;</code></li> </ul>"},{"location":"developer_guide/github_actions/","title":"GitHub Actions","text":""},{"location":"developer_guide/github_actions/#ci-workflow","title":"CI Workflow","text":"<p>The CI workflow contains the jobs that run in pull requests and pushes to the <code>main</code> branch:</p> <ul> <li><code>tests</code>: run tox on various Python versions and operating systems</li> <li><code>coverage</code>: generates code coverage reports for the docs site and README status badge</li> <li><code>docs-build</code>: builds the docs site</li> <li><code>markdownlint</code>: lints Markdown files</li> <li><code>markdown-link-check</code>: checks links in Markdown files work</li> <li><code>docs-deploy</code> and <code>docs-delete</code>: automate docs versioning</li> </ul> <p>Notes:</p> <ul> <li>tox is used to ensure that results can be replicated locally</li> <li>Not all jobs run every workflow call: see the <code>if</code> keyword in each job</li> <li>Some jobs depend on other jobs: see the <code>needs</code> keyword in each job</li> <li>Artifacts are used to access the coverage reports generated by <code>tests</code> in <code>coverage</code>:   storing workflow data as artifacts</li> </ul> CI workflow source code <p><code>.github/workflows/ci.yml</code></p> <pre><code>name: CI\non:\npull_request:\n# default types + closed\ntypes: [opened, synchronize, reopened, closed]\npush:\nbranches:\n- main\ndefaults:\nrun:\nshell: bash\n# cancel in-progress runs for the current workflow\nconcurrency:\ngroup: \"${{ github.workflow }}-${{ github.ref }}\"\ncancel-in-progress: true\nenv:\nPIP_DISABLE_PIP_VERSION_CHECK: 1\npermissions:\ncontents: write\njobs:\ntests:\nname: \"Run tests using python-${{ matrix.python-version }} on ${{ matrix.os }}\"\nruns-on: \"${{ matrix.os }}\"\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nstrategy:\nfail-fast: false\nmatrix:\nos: [ubuntu-latest, macos-latest, windows-latest]\npython-version: ['3.8', '3.9', '3.10', '3.11']\nsteps:\n- name: \"Check out the repo\"\nuses: \"actions/checkout@v3\"\n- name: \"Set up Python\"\nuses: \"actions/setup-python@v4\"\nwith:\npython-version: \"${{ matrix.python-version }}\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: \"Install dependencies\"\nrun: python -m pip install tox tox-gh-actions\n- name: \"Run tox for python-${{ matrix.python-version }} on ${{ matrix.os }}\"\nrun: python -m tox\n- name: \"Upload coverage data\"\nuses: actions/upload-artifact@v3\nwith:\nname: covdata\npath: .coverage.*\ncoverage:\nname: Generate code coverage reports\nneeds: tests\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nsteps:\n- name: \"Check out the repo\"\nuses: \"actions/checkout@v3\"\n- name: \"Set up Python\"\nuses: \"actions/setup-python@v4\"\nwith:\npython-version: \"3.x\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: \"Install dependencies\"\nrun: python -m pip install tox tox-gh-actions\n- name: \"Download coverage data from tests\"\nuses: actions/download-artifact@v3\nwith:\nname: covdata\n- name: \"Combine coverage data from tests\"\nrun: |\npython -m tox -e coverage\nexport TOTAL=$(python -c \"import json;print(json.load(open('coverage.json'))['totals']['percent_covered_display'])\")\necho \"total=$TOTAL\" &gt;&gt; $GITHUB_ENV\necho \"### Total coverage: ${TOTAL}%\" &gt;&gt; $GITHUB_STEP_SUMMARY\n- name: \"Make coverage badge\"\nif: (github.repository == 'patrick-5546/xlbudget') &amp;&amp; (github.ref == 'refs/heads/main')\n# https://gist.github.com/patrick-5546/845b19d91f3d03c94677f6fae6eb414c\nuses: schneegans/dynamic-badges-action@v1.6.0\nwith:\n# GIST_TOKEN is a GitHub personal access token with scope \"gist\".\nauth: ${{ secrets.GIST_TOKEN }}\ngistID: 845b19d91f3d03c94677f6fae6eb414c   # replace with your real Gist id.\nfilename: covbadge-xlbudget.json\nlabel: Coverage\nmessage: ${{ env.total }}%\nminColorRange: 50\nmaxColorRange: 90\nvalColorRange: ${{ env.total }}\n- name: \"Upload HTML coverage report\"\nuses: actions/upload-artifact@v3\nwith:\nname: htmlcov\npath: htmlcov/\ndocs-build:\nname: Build Docs\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nsteps:\n- name: \"Check out the repo\"\nuses: \"actions/checkout@v3\"\n- name: \"Set up Python\"\nuses: \"actions/setup-python@v4\"\nwith:\npython-version: \"3.x\"\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: \"Install dependencies\"\nrun: python -m pip install tox tox-gh-actions\n- name: \"Build docs\"\nrun: python -m tox -e docs-build\n# https://github.com/nosborn/github-action-markdown-cli\nmarkdownlint:\nname: Lint Markdown\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: docs-build\nsteps:\n- name: Check out code\nuses: actions/checkout@v3\n- name: Lint markdown pages\nuses: nosborn/github-action-markdown-cli@v3\nwith:\nfiles: .\nconfig_file: '.markdownlint.json'\ndot: true\n# https://github.com/gaurav-nelson/github-action-markdown-link-check\nmarkdown-link-check:\nname: Check links in Markdown files\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: docs-build\nsteps:\n- name: Check out code\nuses: actions/checkout@v3\n- name: Check markdown pages for broken links\nuses: gaurav-nelson/github-action-markdown-link-check@v1\nwith:\nconfig-file: '.mlc_config.json'\nfolder-path: '.'\n# https://squidfunk.github.io/mkdocs-material/publishing-your-site/#with-github-actions\ndocs-deploy:\nname: Deploy Docs version\nruns-on: ubuntu-latest\nif: github.event_name != 'pull_request' || github.event.action != 'closed'\nneeds: [coverage, markdownlint, markdown-link-check]\nsteps:\n- name: Check out code\nuses: actions/checkout@v3\nwith:\n# checkout all commits to get accurate page revision times\n# for the git-revision-date-localized plugin\nfetch-depth: '0'\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: 3.x\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: Cache downloaded files\nuses: actions/cache@v3\nwith:\nkey: ${{ github.ref }}\npath: .cache\n- name: Download HTML coverage report\nuses: actions/download-artifact@v3\nwith:\nname: htmlcov\npath: htmlcov\n- name: Install dependencies\nrun: python -m pip install -r requirements/docs.txt\n- name: \"Deploy pr-${{ github.event.number }} version of the Docs\"\nif: github.event_name == 'pull_request'\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike deploy --push pr-${{ github.event.number }}\n- name: Deploy main version of the Docs\nif: github.event_name == 'push' &amp;&amp; github.ref == 'refs/heads/main'\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike deploy --push --update-aliases main latest\ndocs-delete:\nname: Delete Docs version\nruns-on: ubuntu-latest\nif: github.event_name == 'pull_request' &amp;&amp; github.event.action == 'closed'\nsteps:\n- name: Check out code\nuses: actions/checkout@v3\nwith:\n# checkout all commits and branches to get gh-pages\nfetch-depth: '0'\n- name: Setup Python\nuses: actions/setup-python@v4\nwith:\npython-version: 3.x\ncache: pip\ncache-dependency-path: 'pyproject.toml'\n- name: Install dependencies\nrun: python -m pip install -r requirements/docs.txt\n- name: \"Delete pr-${{ github.event.number }} version of the Docs\"\nrun: |\ngit config user.name ci-bot\ngit config user.email ci-bot@example.com\nmike delete --push pr-${{ github.event.number }}\n</code></pre>"},{"location":"developer_guide/github_actions/#release-workflow","title":"Release Workflow","text":"<p>TBD.</p> Release workflow source code <p><code>.github/workflows/release.yml</code></p> <pre><code># this file is *not* meant to cover or endorse the use of GitHub Actions, but rather to\n# help make automated releases for this project\nname: Release\non:\nrelease:\ntypes: [published]\njobs:\nbuild-and-publish:\nruns-on: ubuntu-latest\nsteps:\n- name: Checkout\nuses: actions/checkout@v3\n- name: Set up Python\nuses: actions/setup-python@v4\nwith:\npython-version: '3.x'\n- name: Install build dependencies\nrun: python -m pip install -U setuptools wheel build\n- name: Build\nrun: python -m build .\n- name: Publish\nuses: pypa/gh-action-pypi-publish@master\nwith:\npassword: ${{ secrets.PYPI_API_TOKEN }}\n</code></pre>"},{"location":"developer_guide/releases/","title":"Releases","text":""},{"location":"developer_guide/releases/#preparing-for-your-first-release","title":"Preparing for your first release","text":"<ol> <li>Go through <code>pyproject.toml</code> and update the relevant fields</li> <li>In <code>tox.ini</code>, set <code>check-release</code> as a default environment by adding it to <code>envlist</code></li> <li>In this file, uncomment badges and uncomment and update their URLs with the package name    where applicable</li> <li>Create a repository secret named <code>PYPI_API_TOKEN</code> with the corresponding value</li> </ol>"},{"location":"developer_guide/releases/#publishing-a-new-release","title":"Publishing a new release","text":"<p>TBD.</p>"},{"location":"developer_guide/vscode/","title":"VS Code","text":""},{"location":"developer_guide/vscode/#setup-for-vs-code","title":"Setup for VS Code","text":"<ol> <li><code>cd</code> to the root directory of the repository</li> <li>Create the <code>dev</code> development environment:    <code>tox devenv -e dev .venv</code></li> <li>Open the repository in VS Code: <code>code .</code></li> <li>Install the recommended extensions</li> </ol>"},{"location":"developer_guide/vscode/#configuration-files","title":"Configuration Files","text":"<p>VS Code configuration files can be found in the <code>.vscode/</code> directory.</p> <ul> <li><code>cspell.json</code>: configuration for the spell checker</li> <li><code>extensions.json</code>: recommended extensions<ul> <li>See the recommended extensions by searching for \"@recommended\" in the Extensions view</li> </ul> </li> <li><code>google_docstring_custom_template.mustache</code>: a custom docstrings template for   autoDocstring   until this issue is resolved</li> <li><code>launch.json</code>: launch configurations<ul> <li>Run the launch configurations from the Run and Debug view</li> </ul> </li> <li><code>settings.json</code>: settings</li> </ul>"},{"location":"developer_guide/vscode/#shortcuts","title":"Shortcuts","text":"<p>Useful VS Code shortcuts that aren't specific to this repository.</p> <p>MacOS Shortcuts</p> <p>For keyboard shortcuts on MacOS, substitute Ctrl with Cmd.</p> <ul> <li>Open Quick Open: Ctrl+P<ul> <li>Search for files</li> <li>Open the command palette by typing \"&gt; \"</li> <li>Search for tasks by typing \"task \"</li> <li>Search for launch configurations by typing \"debug \"</li> </ul> </li> <li>Open Command Palette: Ctrl+Shift+P</li> </ul>"},{"location":"developer_guide/vscode/#integrations","title":"Integrations","text":""},{"location":"developer_guide/vscode/#docs","title":"Docs","text":"<p>Related recommended extensions enhance Markdown file previews, check for markdownlint errors, enhance VS Code Markdown support, add autocomplete for <code>mkdocs.yml</code>, and more:</p> <ul> <li>The enhanced Markdown file preview replaces VS Code's built-in preview</li> <li>The configuration file for markdownlint is <code>.markdownlint.json</code></li> <li>Format tables in a Markdown file with Alt+Shift+F<ul> <li>On Linux, the shortcut is Ctrl+Shift+I</li> </ul> </li> </ul> <p>There are also launch configurations to run the development server and open browsers:</p> Launch Configuration Description Serve Docs runs <code>mkdocs serve</code> Open Docs in Chrome runs <code>mkdocs serve</code> and open Docs in Chrome Open Docs in Edge runs <code>mkdocs serve</code> and open Docs in Microsoft Edge"},{"location":"developer_guide/vscode/#python","title":"Python","text":"<p>Related recommended extensions improve autocomplete, format on save, lint, test, and more:</p> <ul> <li>Adds autocomplete for docstrings, type hints, and functions</li> <li>Runs the black and isort   formatters when a file is saved</li> <li>Runs the flake8 and mypy   linters when a file is saved and after formatters run</li> <li>Run tests from the Testing view</li> </ul>"},{"location":"developer_guide/vscode/#common-extensions-settings","title":"Common Extensions &amp; Settings","text":"<p>Other recommended extensions further improve autocomplete (AI, file paths), check spelling, and show the commit and author who last modified the current line, and more:</p> <ul> <li>Mark a word as spelled correct by hovering over it, selecting <code>Quick Fix...</code>,   then selecting <code>Add \"&lt;word&gt;\" to config: .vscode/cspell.json</code></li> <li>Hover over the current line blame annoation at the end of the line for more details</li> </ul> <p>Common settings:</p> <ul> <li>Make whitespace at the end of the line visible</li> <li>Ruler at the line length limit</li> </ul>"},{"location":"reference/SUMMARY/","title":"SUMMARY","text":"<ul> <li>xlbudget<ul> <li>commands</li> <li>configure</li> <li>state</li> </ul> </li> </ul>"},{"location":"reference/xlbudget/","title":"xlbudget","text":"<p>Xlbudget: a personal bookkeeping assistant.</p>"},{"location":"reference/xlbudget/#xlbudget-functions","title":"Functions","text":""},{"location":"reference/xlbudget/#xlbudget.main","title":"main","text":"<pre><code>main()\n</code></pre> <p>Entry point for the application script.</p> Source code in <code>xlbudget/__init__.py</code> <pre><code>def main():\n\"Entry point for the application script.\"\npre_config = pre_state_configuration()\nstate = setup_state(pre_config)\npost_state_configuration(state)\nstate.cmd.run()\n</code></pre>"},{"location":"reference/xlbudget/commands/","title":"commands","text":"<p>The commands, implemented as implementations of the abstract class <code>Command</code>.</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands-classes","title":"Classes","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command","title":"Command","text":"<p>         Bases: <code>ABC</code></p> <p>The abstract class that the command implementations implement.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>class Command(ABC):\n\"\"\"The abstract class that the command implementations implement.\"\"\"\n@property\n@abstractmethod\ndef name(self) -&gt; str:\n\"\"\"The command's CLI name. Should be implemented as a class attribute\"\"\"\npass\n@property\n@abstractmethod\ndef aliases(self) -&gt; List[str]:\n\"\"\"The command's CLI aliases. Should be implemented as a class attribute\"\"\"\npass\n@classmethod\n@abstractmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Adds the command's CLI arguments to the argument parser.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\npass\n@abstractmethod\ndef __init__(self, args: Namespace) -&gt; None:\n\"\"\"Initializes the command instance, storing the relevant CLI arguments as\n        instance variables.\n        Args:\n            args (Namespace): The CLI arguments.\n        \"\"\"\npass\n@abstractmethod\ndef run(self) -&gt; None:\n\"\"\"Runs the command.\"\"\"\npass\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command-attributes","title":"Attributes","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.aliases","title":"aliases  <code>property</code> <code>abstractmethod</code>","text":"<pre><code>aliases: List[str]\n</code></pre> <p>The command's CLI aliases. Should be implemented as a class attribute</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.name","title":"name  <code>property</code> <code>abstractmethod</code>","text":"<pre><code>name: str\n</code></pre> <p>The command's CLI name. Should be implemented as a class attribute</p>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.__init__","title":"__init__  <code>abstractmethod</code>","text":"<pre><code>__init__(args)\n</code></pre> <p>Initializes the command instance, storing the relevant CLI arguments as instance variables.</p> <p>Parameters:</p> Name Type Description Default <code>args</code> <code>Namespace</code> <p>The CLI arguments.</p> required Source code in <code>xlbudget/commands.py</code> <pre><code>@abstractmethod\ndef __init__(self, args: Namespace) -&gt; None:\n\"\"\"Initializes the command instance, storing the relevant CLI arguments as\n    instance variables.\n    Args:\n        args (Namespace): The CLI arguments.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.configure_args","title":"configure_args  <code>abstractmethod</code> <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Adds the command's CLI arguments to the argument parser.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>xlbudget/commands.py</code> <pre><code>@classmethod\n@abstractmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Adds the command's CLI arguments to the argument parser.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\npass\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Command.run","title":"run  <code>abstractmethod</code>","text":"<pre><code>run()\n</code></pre> <p>Runs the command.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>@abstractmethod\ndef run(self) -&gt; None:\n\"\"\"Runs the command.\"\"\"\npass\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate","title":"Generate","text":"<p>         Bases: <code>Command</code></p> <p>The <code>generate</code> command generates a new xlbudget file.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The command's CLI name.</p> <code>aliases</code> <code>List[str]</code> <p>The command's CLI aliases.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>class Generate(Command):\n\"\"\"The `generate` command generates a new xlbudget file.\n    Attributes:\n        name (str): The command's CLI name.\n        aliases (List[str]): The command's CLI aliases.\n    \"\"\"\nname: str = \"generate\"\naliases: List[str] = [\"g\"]\n@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `generate` command.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"generate a new xlbudget file\",\ncls=Generate,\n)\nparser.add_argument(\n\"-f\", \"--force\", action=\"store_true\", help=\"overwrite file if it exists\"\n)\ndef __init__(self, args: Namespace) -&gt; None:\npass\ndef run(self) -&gt; None:\nraise NotImplementedError\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Generate.configure_args","title":"configure_args  <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Configures the argument parser for the <code>generate</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `generate` command.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\nparser = _add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"generate a new xlbudget file\",\ncls=Generate,\n)\nparser.add_argument(\n\"-f\", \"--force\", action=\"store_true\", help=\"overwrite file if it exists\"\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update","title":"Update","text":"<p>         Bases: <code>Command</code></p> <p>The <code>update</code> command updates an existing xlbudget file.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The command's CLI name.</p> <code>aliases</code> <code>List[str]</code> <p>The command's CLI aliases.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>class Update(Command):\n\"\"\"The `update` command updates an existing xlbudget file.\n    Attributes:\n        name (str): The command's CLI name.\n        aliases (List[str]): The command's CLI aliases.\n    \"\"\"\nname: str = \"update\"\naliases: List[str] = [\"u\"]\n@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `update` command.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\n_add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"update an existing xlbudget file\",\ncls=Update,\n)\ndef __init__(self, args: Namespace) -&gt; None:\npass\ndef run(self) -&gt; None:\nraise NotImplementedError\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Update.configure_args","title":"configure_args  <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Configures the argument parser for the <code>update</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `update` command.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\n_add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"update an existing xlbudget file\",\ncls=Update,\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Validate","title":"Validate","text":"<p>         Bases: <code>Command</code></p> <p>The <code>validate</code> command validates an existing xlbudget file.</p> <p>Attributes:</p> Name Type Description <code>name</code> <code>str</code> <p>The command's CLI name.</p> <code>aliases</code> <code>List[str]</code> <p>The command's CLI aliases.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>class Validate(Command):\n\"\"\"The `validate` command validates an existing xlbudget file.\n    Attributes:\n        name (str): The command's CLI name.\n        aliases (List[str]): The command's CLI aliases.\n    \"\"\"\nname: str = \"validate\"\naliases: List[str] = [\"v\"]\n@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `validate` command.\n        Args:\n            subparsers (_SubParsersAction): The command `subparsers`.\n        \"\"\"\n_add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"validate an existing xlbudget file\",\ncls=Validate,\n)\ndef __init__(self, args: Namespace) -&gt; None:\npass\ndef run(self) -&gt; None:\nraise NotImplementedError\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands.Validate-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.Validate.configure_args","title":"configure_args  <code>classmethod</code>","text":"<pre><code>configure_args(subparsers)\n</code></pre> <p>Configures the argument parser for the <code>validate</code> command.</p> <p>Parameters:</p> Name Type Description Default <code>subparsers</code> <code>_SubParsersAction</code> <p>The command <code>subparsers</code>.</p> required Source code in <code>xlbudget/commands.py</code> <pre><code>@classmethod\ndef configure_args(cls, subparsers: _SubParsersAction) -&gt; None:\n\"\"\"Configures the argument parser for the `validate` command.\n    Args:\n        subparsers (_SubParsersAction): The command `subparsers`.\n    \"\"\"\n_add_parser(\nsubparsers,\nname=cls.name,\naliases=cls.aliases,\nhelp=\"validate an existing xlbudget file\",\ncls=Validate,\n)\n</code></pre>"},{"location":"reference/xlbudget/commands/#xlbudget.commands-functions","title":"Functions","text":""},{"location":"reference/xlbudget/commands/#xlbudget.commands.get_command_classes","title":"get_command_classes","text":"<pre><code>get_command_classes()\n</code></pre> <p>Gets all classes that implement the <code>Command</code> abstract class.</p> <p>Returns:</p> Type Description <code>List[Type[Command]]</code> <p>A[n] <code>List[Type[Command]]</code> of all command classes.</p> Source code in <code>xlbudget/commands.py</code> <pre><code>def get_command_classes() -&gt; List[Type[Command]]:\n\"\"\"Gets all classes that implement the `Command` abstract class.\n    Returns:\n        A[n] `List[Type[Command]]` of all command classes.\n    \"\"\"\ncommand_module = sys.modules[__name__]\nreturn [getattr(command_module, cls.__name__) for cls in Command.__subclasses__()]\n</code></pre>"},{"location":"reference/xlbudget/configure/","title":"configure","text":"<p>The configuration for xlbudget.</p> Logger usage in this file <p>The logger can only be used after <code>_configure_logger</code> is called in <code>post_state_configuration</code></p>"},{"location":"reference/xlbudget/configure/#xlbudget.configure-classes","title":"Classes","text":""},{"location":"reference/xlbudget/configure/#xlbudget.configure.PreStateConfiguration","title":"PreStateConfiguration","text":"<p>         Bases: <code>NamedTuple</code></p> <p>A named tuple containing items that can be configured before state is set up.</p> <p>Attributes:</p> Name Type Description <code>parser</code> <code>ArgumentParser</code> <p>The argument parser.</p> Source code in <code>xlbudget/configure.py</code> <pre><code>class PreStateConfiguration(NamedTuple):\n\"\"\"A named tuple containing items that can be configured before state is set up.\n    Attributes:\n        parser (ArgumentParser): The argument parser.\n    \"\"\"\nparser: ArgumentParser\n</code></pre>"},{"location":"reference/xlbudget/configure/#xlbudget.configure-functions","title":"Functions","text":""},{"location":"reference/xlbudget/configure/#xlbudget.configure.post_state_configuration","title":"post_state_configuration","text":"<pre><code>post_state_configuration(state)\n</code></pre> <p>Configuration after state is set up.</p> <p>Parameters:</p> Name Type Description Default <code>state</code> <code>State</code> <p>The state.</p> required Source code in <code>xlbudget/configure.py</code> <pre><code>def post_state_configuration(state: State) -&gt; None:\n\"\"\"Configuration after state is set up.\n    Args:\n        state (State): The state.\n    \"\"\"\n_configure_logger(state.args.log_level)\nlogger.info(f\"{state=}\")  # log state after `_configure_logger` is called\n</code></pre>"},{"location":"reference/xlbudget/configure/#xlbudget.configure.pre_state_configuration","title":"pre_state_configuration","text":"<pre><code>pre_state_configuration()\n</code></pre> <p>Configuration before state is setup.</p> <p>Returns:</p> Type Description <code>PreStateConfiguration</code> <p>A[n] <code>PreStateConfiguration</code> containing configured items.</p> Source code in <code>xlbudget/configure.py</code> <pre><code>def pre_state_configuration() -&gt; PreStateConfiguration:\n\"\"\"Configuration before state is setup.\n    Returns:\n        A[n] `PreStateConfiguration` containing configured items.\n    \"\"\"\nparser = _configure_argument_parser()\nconfig = PreStateConfiguration(\nparser=parser,\n)\nreturn config\n</code></pre>"},{"location":"reference/xlbudget/state/","title":"state","text":"<p>The state of xlbudget.</p> Logger usage in this file <p>The logger shouldn't be used in this file because it hasn't been configured yet</p>"},{"location":"reference/xlbudget/state/#xlbudget.state-classes","title":"Classes","text":""},{"location":"reference/xlbudget/state/#xlbudget.state.State","title":"State","text":"<p>         Bases: <code>typing.NamedTuple</code></p> <p>A named tuple containing items that make up the state of the program.</p> <p>Attributes:</p> Name Type Description <code>args</code> <code>Namespace</code> <p>The parsed arguments.</p> <code>cmd</code> <code>Command</code> <p>The command instance.</p> Source code in <code>xlbudget/state.py</code> <pre><code>class State(typing.NamedTuple):\n\"\"\"A named tuple containing items that make up the state of the program.\n    Attributes:\n        args (Namespace): The parsed arguments.\n        cmd (Command): The command instance.\n    \"\"\"\nargs: Namespace\ncmd: Command\n</code></pre>"},{"location":"reference/xlbudget/state/#xlbudget.state-functions","title":"Functions","text":""},{"location":"reference/xlbudget/state/#xlbudget.state.setup_state","title":"setup_state","text":"<pre><code>setup_state(config)\n</code></pre> <p>Sets up the state for the program.</p> Statically typing <code>config</code> <p><code>config</code>, which is type <code>configure.PreStateConfiguration</code>, can't be statically typed in this file as it would cause a circular import</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>configure.PreStateConfiguration</code> <p>The configuration before state is set up.</p> required <p>Returns:</p> Type Description <code>State</code> <p>A[n] <code>State</code> containing items that are set up.</p> Source code in <code>xlbudget/state.py</code> <pre><code>def setup_state(config) -&gt; State:\n\"\"\"Sets up the state for the program.\n    Warning: Statically typing `config`\n        `config`, which is type `configure.PreStateConfiguration`, can't be statically\n        typed in this file as it would cause a circular import\n    Args:\n        config (configure.PreStateConfiguration): The configuration before\n            state is set up.\n    Returns:\n        A[n] `State` containing items that are set up.\n    \"\"\"\nargs = config.parser.parse_args()\ncmd = args.init(args)\nstate = State(\nargs=args,\ncmd=cmd,\n)\nreturn state\n</code></pre>"},{"location":"user_guide/commands/","title":"Commands","text":""},{"location":"user_guide/configuration/","title":"Configuration","text":""},{"location":"user_guide/getting_started/","title":"Getting Started","text":""},{"location":"user_guide/installation/","title":"Installation","text":""}]}